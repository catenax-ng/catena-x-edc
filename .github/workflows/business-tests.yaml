---
name: "Business Tests"

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  business-test:
    runs-on: ubuntu-latest
    steps:
      ##############
      ### Set-Up ###
      ##############
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set-Up JDK 11
        uses: actions/setup-java@v3.4.0
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      -
        name: Helm Set-Up
        uses: azure/setup-helm@v2.1
        with:
          version: v3.8.1
      -
        name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.3.0
        with:
          cluster_name: ${{ env.GITHUB_SHA }}

      ############################################
      ### Prepare And Install Test Environment ###
      ############################################
      - name: Install test environment
        run: |-
          # Update helm dependencies
          helm dependency update edc-tests/src/main/resources/deployment/helm/all-in-one

          # Install the all-in-one environment
          helm install test-environment edc-tests/src/main/resources/deployment/helm/all-in-one \
            --set sokrates-edc-controlplane.service.type=NodePort \
            --set plato-edc-controlplane.service.type=NodePort \
            --set sokrates-edc-dataplane.service.type=NodePort \
            --set plato-edc-dataplane.service.type=NodePort \
            --wait-for-jobs --timeout=120s

      - name: Wait for Sokrates and Plato ready
        run: |-
          # Wait for Control-/DataPlanes to become ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=sokrates-edc-controlplane --timeout=120s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=sokrates-edc-dataplane --timeout=120s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=plato-edc-controlplane --timeout=120s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=plato-edc-dataplane --timeout=120s

      - name: Expose k8s service endpoints to github env
        run: |-
          echo "URL_SOKRATES_DATA_MAGEMENT=http://$(kubectl get svc sokrates-edc-controlplane -o go-template='{{ .spec.clusterIP }}{{":"}}{{ (index .spec.ports 2).nodePort }}')/data" | tee -a $GITHUB_ENV
          echo "URL_SOKRATES_IDS=http://$(kubectl get svc sokrates-edc-controlplane -o go-template='{{ .spec.clusterIP }}{{":"}}{{ (index .spec.ports 4).nodePort }}')/api/v1/ids" | tee -a $GITHUB_ENV
          echo "URL_SOKRATES_DATA_PLANE=http://$(kubectl get svc sokrates-edc-dataplane -o go-template='{{ .spec.clusterIP }}{{":"}}{{ (index .spec.ports 2).nodePort }}')/api/public" | tee -a $GITHUB_ENV
          echo "URL_PLATO_DATA_MAGEMENT=http://$(kubectl get svc plato-edc-controlplane -o go-template='{{ .spec.clusterIP }}{{":"}}{{ (index .spec.ports 2).nodePort }}')/data" | tee -a $GITHUB_ENV
          echo "URL_PLATO_IDS=http://$(kubectl get svc plato-edc-controlplane -o go-template='{{ .spec.clusterIP }}{{":"}}{{ (index .spec.ports 4).nodePort }}')/api/v1/ids" | tee -a $GITHUB_ENV
          echo "URL_PLATO_DATA_PLANE=http://$(kubectl get svc plato-edc-dataplane -o go-template='{{ .spec.clusterIP }}{{":"}}{{ (index .spec.ports 2).nodePort }}')/api/public" | tee -a $GITHUB_ENV

      ##########################
      ### Run Business Tests ###
      ##########################
      - name: run tests
        run: ./mvnw --am --projects edc-tests/business-tests test -Dtest="RunCucumberTest"
        # env: {} # Inherited from $GITHUB_ENV

      #################
      ### Tear Down ###
      #################
      -
        name: Destroy the kind cluster
        if: always()
        run: >-
          kind delete clusters ${{ env.GITHUB_SHA }}
