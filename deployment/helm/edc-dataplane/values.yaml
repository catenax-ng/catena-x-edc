# Default values for edc-dataplane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/catenax-ng/catena-x-edc/edc-dataplane
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecret:
  dockerconfigjson: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: dataplane-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

configuration:
  properties:
    edc.api.control.auth.apikey.key: ""
    edc.api.control.auth.apikey.value: ""
    edc.assetindex.cosmos.account-name: ""
    edc.assetindex.cosmos.container-name: ""
    edc.assetindex.cosmos.database-name: ""
    edc.assetindex.cosmos.preferred-region: ""
    edc.atomikos.checkpoint.interval: ""
    edc.atomikos.directory: ""
    edc.atomikos.logging: ""
    edc.atomikos.threaded2pc: ""
    edc.atomikos.timeout: ""
    edc.aws.access.key: ""
    edc.aws.provision.retry.retries.max: ""
    edc.aws.provision.role.duration.session.max: ""
    edc.aws.secret.access.key: ""
    edc.blobstore.endpoint: ""
    edc.controlplane.validation-endpoint: ""
    edc.core.retry.backoff.max: ""
    edc.core.retry.backoff.min: ""
    edc.core.retry.retries.max: ""
    edc.core.system.health.check.liveness-period: ""
    edc.core.system.health.check.readiness-period: ""
    edc.core.system.health.check.startup-period: ""
    edc.core.system.health.check.threadpool-size: ""
    edc.cosmos.partition-key: ""
    edc.cosmos.query-metrics-enabled: ""
    edc.dataplane.queue.capacity: ""
    edc.dataplane.wait: ""
    edc.dataplane.workers: ""
    edc.datasource.contractdefinition.name: ""
    edc.dpf.selector.url: ""
    edc.events.topic.endpoint: ""
    edc.events.topic.name: ""
    edc.fs.config: ""
    edc.hostname: ""
    edc.identity.did.url: ""
    edc.ids.catalog.id: ""
    edc.ids.curator: ""
    edc.ids.description: ""
    edc.ids.endpoint: ""
    edc.ids.id: ""
    edc.ids.maintainer: ""
    edc.ids.security.profile: ""
    edc.ids.title: ""
    edc.ids.validation.referringconnector: ""
    edc.ion.crawler.did-type: ""
    edc.ion.crawler.interval-minutes: ""
    edc.ion.crawler.ion.url: ""
    edc.keystore: ""
    edc.keystore.password: ""
    edc.metrics.enabled: ""
    edc.metrics.executor.enabled: ""
    edc.metrics.jersey.enabled: ""
    edc.metrics.jetty.enabled: ""
    edc.metrics.okhttp.enabled: ""
    edc.metrics.system.enabled: ""
    edc.negotiation.consumer.state-machine.batch-size: ""
    edc.negotiation.provider.state-machine.batch-size: ""
    edc.node.directory.cosmos.account.name: ""
    edc.node.directory.cosmos.container.name: ""
    edc.node.directory.cosmos.database.name: ""
    edc.node.directory.cosmos.preferred.region: ""
    edc.oauth.client.id: ""
    edc.oauth.private.key.alias: ""
    edc.oauth.provider.audience: ""
    edc.oauth.provider.jwks.refresh: ""
    edc.oauth.provider.jwks.url: ""
    edc.oauth.public.key.alias: ""
    edc.oauth.token.url: ""
    edc.oauth.validation.nbf.leeway: ""
    edc.public.key.alias: ""
    edc.receiver.http.auth-code: ""
    edc.receiver.http.auth-key: ""
    edc.receiver.http.endpoint: ""
    edc.transfer.dataplane.sync.endpoint: ""
    edc.transfer.dataplane.sync.token.validity: ""
    edc.transfer.dataplane.token.signer.privatekey.alias: ""
    edc.transfer.functions.check.endpoint: ""
    edc.transfer.functions.enabled.protocols: ""
    edc.transfer.functions.transfer.endpoint: ""
    edc.transfer-process-store.cosmos.account.name: ""
    edc.transfer-process-store.cosmos.container-name: ""
    edc.transfer-process-store.cosmos.preferred-region: ""
    edc.transfer-process-store.database.name: ""
    edc.transfer.state-machine.batch-size: ""
    edc.vault: ""
    edc.vault.certificate: ""
    edc.vault.clientid: ""
    edc.vault.clientsecret: ""
    edc.vault.name: ""
    edc.vault.tenantid: ""
    edc.webdid.doh.url: ""
    edc.web.rest.cors.enabled: ""
    edc.web.rest.cors.headers: ""
    edc.web.rest.cors.methods: ""
    edc.web.rest.cors.origins: ""
