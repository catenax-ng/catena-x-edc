@startuml

autonumber

skinparam BoxPadding 50

skinParam NoteBackgroundColor WhiteSmoke
skinParam NoteFontColor Black
skinParam ParticipantBackgroundColor WhiteSmoke
skinParam ActorBackgroundColor WhiteSmoke
skinParam AgentBackgroundColor White
skinParam AgentBorderColor SkyBlue
skinparam shadowing false

!define ConsumerColor f8f2ff
!define ProviderColor d9edff
!define WarningColor Business
!define LeadColor Technology

box Consumer http 9191 data 9192 ids 9292 #ConsumerColor
    actor Partner1 as "Partner" #white
    database AssetCatalogConsumer as "Asset\nCatalog" #white
    participant ConnectorConsumer as "Eclipse\nDataspace\nConnector" #white
end box

box "Consumer Cloud"
    database FileShare1 as "AWS S3"
    participant CloudAPI1 as "CloudAPI"
end box

box "Provider Data Source"
    database FileShare2 as "Data Source"
end box

rnote right CloudAPI1 #yellow
We use AWS as an example
It can be another cloud provider e.g. Azure
end note

box Provider http 8181 data 8182 ids 8282 #ProviderColor
    participant ConnectorProvider as "Eclipse\nDataspace\nConnector" #white
    participant PresignedHttpDataSink as "PresignedHttpDataSink" #white
    participant DataSource as "DataSource" #white
    database AssetCatalogProvider as "Asset\nCatalog" #white
    actor Partner2 as "Partner" #white

    rnote right DataSource #yellow
    Can be any dataplane datasource implementation
    end note
end box

== Contract Offering ==

Partner2 -> FileShare2 : Insert AssetData
Partner2 -> ConnectorProvider : Configure Contract Offer Framework
rnote right Partner2 #yellow
In order to request any data, a contract agreement
has to be negotiated between provider and consumer.
end note
Partner2 -> AssetCatalogProvider : Create Asset

== Contract Negotiation ==
Partner1 -> ConnectorConsumer : Accept Contract for Data Asset
ConnectorConsumer <--> ConnectorProvider : Negotiate Contract
rnote right ConnectorConsumer #yellow
In order to trigger the negotiation, we use Data management api endpoints.
end note
== Data Transfer ==
Partner1 -> CloudAPI1 : Create Presigned URL for Upload (data destination)
Partner1 -> ConnectorConsumer : Initiate Data Transfer of Asset using the Upload URL


ConnectorConsumer -> ConnectorProvider : Data Request Message
DataSource -> FileShare2 : Read content from the source
return Data Content Parts
DataSource -> PresignedHttpDataSink : Provide read parts
PresignedHttpDataSink -> FileShare1  : Push to fileshare/database/...

Partner1 -> FileShare1 : Access AssetData


@enduml
