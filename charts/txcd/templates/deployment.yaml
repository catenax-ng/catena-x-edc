apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "txdc.fullname" . }}-controlplane
  labels:
    {{- include "txdc.controlplane.labels" . | nindent 4 }}
spec:
  {{- if not .Values.controlplane.autoscaling.enabled }}
  replicas: {{ .Values.controlplane.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "txdc.controlplane.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.controlplane.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "txdc.controlplane.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccount: {{ include "txdc.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.controlplane.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.controlplane.securityContext | nindent 12 }}
          {{- if .Values.controlplane.image.repository }}
          image: "{{ .Values.controlplane.image.repository }}:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- else if and .Values.postgresql.enabled (not .Values.vault.azure.enabled) }}
          image: "ghcr.io/catenax-ng/product-edc/edc-controlplane-postgresql-hashicorp-vault:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- else if and .Values.postgresql.enabled .Values.vault.azure.enabled }}
          image: "ghcr.io/catenax-ng/product-edc/edc-controlplane-postgresql-vault:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- else if .Values.vault.hashicorp.enabled }}
          image: "ghcr.io/catenax-ng/product-edc/edc-controlplane-memory-hashicorp-vault:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- else if .Values.vault.azure.enabled }}
          image: "ghcr.io/catenax-ng/product-edc/edc-controlplane-memory:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          {{- else }}
          {{- fail "cannot choose control-plane image automatically based on configuration" }}
          {{- end }}
          imagePullPolicy: {{ .Values.controlplane.image.pullPolicy }}
          ports:
          {{- range $key,$value := .Values.controlplane.endpoints }}
            - name: {{ $key }}
              containerPort: {{ $value.port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.controlplane.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.controlplane.endpoints.default.path }}/check/liveness
              port: {{ .Values.controlplane.endpoints.default.port }}
            initialDelaySeconds: {{ .Values.controlplane.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.controlplane.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.controlplane.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.controlplane.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.controlplane.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.controlplane.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.controlplane.endpoints.default.path }}/check/readiness
              port: {{ .Values.controlplane.endpoints.default.port }}
            initialDelaySeconds: {{ .Values.controlplane.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.controlplane.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.controlplane.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.controlplane.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.controlplane.readinessProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.controlplane.resources | nindent 12 }}
          volumeMounts:
            - name: configuration
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
            - name: configuration
              mountPath: /app/logging.properties
              subPath: logging.properties
          env:
          {{- if .Values.controlplane.debug.enabled }}
            - name: JAVA_TOOL_OPTIONS
            {{- if and .Values.controlplane.debug.enabled .Values.controlplane.debug.suspendOnStart }}
              value: {{ printf "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=%v" .Values.controlplane.debug.port }}
            {{- else }}
              value: {{ printf "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=%v" .Values.controlplane.debug.port }}
            {{- end }}
          {{- end }}

            ########################
            ## DAPS CONFIGURATION ##
            ########################

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/iam/oauth2/oauth2-core
            - name: EDC_OAUTH_CLIENT_ID
              value: {{ .Values.daps.clientId | quote }}
            - name: EDC_OAUTH_PROVIDER_JWKS_URL
              value: {{ printf "%s%s" .Values.daps.url .Values.daps.paths.jwks }}
            - name: EDC_OAUTH_TOKEN_URL
              value: {{ printf "%s%s" .Values.daps.url .Values.daps.paths.token }}
            - name: EDC_OAUTH_PRIVATE_KEY_ALIAS
              value: {{ .Values.vault.secretNames.dapsPrivateKey | quote }}
            - name: EDC_OAUTH_PUBLIC_KEY_ALIAS
              value: {{ .Values.vault.secretNames.dapsPublicKey | quote }}

            #######
            # API #
            #######
            - name: EDC_API_AUTH_KEY
              value: {{ .Values.controlplane.endpoints.data.authKey | required ".Values.controlplane.endpoints.data.authKey is required" | quote }}
            - name: WEB_HTTP_DEFAULT_PORT
              value: {{ .Values.controlplane.endpoints.default.port | quote }}
            - name: WEB_HTTP_DEFAULT_PATH
              value: {{ .Values.controlplane.endpoints.default.path | quote }}
            - name: WEB_HTTP_DATA_PORT
              value: {{ .Values.controlplane.endpoints.data.port | quote }}
            - name: WEB_HTTP_DATA_PATH
              value: {{ .Values.controlplane.endpoints.data.path | quote }}
            - name: WEB_HTTP_VALIDATION_PORT
              value: {{ .Values.controlplane.endpoints.validation.port | quote }}
            - name: WEB_HTTP_VALIDATION_PATH
              value: {{ .Values.controlplane.endpoints.validation.path | quote }}
            - name: WEB_HTTP_CONTROL_PORT
              value: {{ .Values.controlplane.endpoints.control.port | quote }}
            - name: WEB_HTTP_CONTROL_PATH
              value: {{ .Values.controlplane.endpoints.control.path | quote }}
            - name: WEB_HTTP_IDS_PORT
              value: {{ .Values.controlplane.endpoints.ids.port | quote }}
            - name: WEB_HTTP_IDS_PATH
              value: {{ .Values.controlplane.endpoints.ids.path | quote }}

            #########
            ## IDS ##
            #########
            - name: IDS_WEBHOOK_ADDRESS
              value: {{ include "txdc.controlplane.url.ids" . }}
            - name: EDC_IDS_ENDPOINT
              value: {{ include "txdc.controlplane.url.ids" . }}
            - name: EDC_IDS_ENDPOINT_AUDIENCE
              value: {{ printf "%s%s" (include "txdc.controlplane.url.ids" . ) "/data" }}
            - name: EDC_IDS_ID
              value: {{ printf "urn:connector:%s" (lower .Values.controlplane.internationalDataSpaces.id)  }}
            - name: EDC_IDS_DESCRIPTION
              value: {{ .Values.controlplane.internationalDataSpaces.description | quote }}
            - name: EDC_IDS_TITLE
              value: {{ .Values.controlplane.internationalDataSpaces.title | quote }}
            - name: EDC_IDS_MAINTAINER
              value: {{ .Values.controlplane.internationalDataSpaces.maintainer | quote }}
            - name: EDC_IDS_CURATOR
              value: {{ .Values.controlplane.internationalDataSpaces.curator | quote }}
            - name: EDC_IDS_CATALOG_ID
              value: {{ printf "urn:catalog:%s" (lower .Values.controlplane.internationalDataSpaces.catalogId) }}

            {{- if .Values.postgresql.enabled }}
            ################
            ## POSTGRESQL ##
            ################

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/control-plane/store/sql/asset-index-sql
            - name: EDC_DATASOURCE_ASSET_NAME
              value: asset
            - name: EDC_DATASOURCE_ASSET_USER
              value: {{ include "txdc.postgresql.username" . }}
            - name: EDC_DATASOURCE_ASSET_PASSWORD
              value: {{ include "txdc.postgresql.password" . }}
            - name: EDC_DATASOURCE_ASSET_URL
              value: {{ include "txdc.postgresql.jdbcUrl" . }}

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/control-plane/store/sql/contract-definition-store-sql
            - name: EDC_DATASOURCE_CONTRACTDEFINITION_NAME
              value: contractdefinition
            - name: EDC_DATASOURCE_CONTRACTDEFINITION_USER
              value: {{ include "txdc.postgresql.username" . }}
            - name: EDC_DATASOURCE_CONTRACTDEFINITION_PASSWORD
              value: {{ include "txdc.postgresql.password" . }}
            - name: EDC_DATASOURCE_CONTRACTDEFINITION_URL
              value: {{ include "txdc.postgresql.jdbcUrl" . }}

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/control-plane/store/sql/contract-negotiation-store-sql
            - name: EDC_DATASOURCE_CONTRACTNEGOTIATION_NAME
              value: contractnegotiation
            - name: EDC_DATASOURCE_CONTRACTNEGOTIATION_USER
              value: {{ include "txdc.postgresql.username" . }}
            - name: EDC_DATASOURCE_CONTRACTNEGOTIATION_PASSWORD
              value: {{ include "txdc.postgresql.password" . }}
            - name: EDC_DATASOURCE_CONTRACTNEGOTIATION_URL
              value: {{ include "txdc.postgresql.jdbcUrl" . }}

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/control-plane/store/sql/policy-store-sql
            - name: EDC_DATASOURCE_POLICY_NAME
              value: policy
            - name: EDC_DATASOURCE_POLICY_USER
              value: {{ include "txdc.postgresql.username" . }}
            - name: EDC_DATASOURCE_POLICY_PASSWORD
              value: {{ include "txdc.postgresql.password" . }}
            - name: EDC_DATASOURCE_POLICY_URL
              value: {{ include "txdc.postgresql.jdbcUrl" . }}

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/control-plane/store/sql/transfer-process-store-sql
            - name: EDC_DATASOURCE_TRANSFERPROCESS_NAME
              value: transferprocess
            - name: EDC_DATASOURCE_TRANSFERPROCESS_USER
              value: {{ include "txdc.postgresql.username" . }}
            - name: EDC_DATASOURCE_TRANSFERPROCESS_PASSWORD
              value: {{ include "txdc.postgresql.password" . }}
            - name: EDC_DATASOURCE_TRANSFERPROCESS_URL
              value: {{ include "txdc.postgresql.jdbcUrl" . }}
            {{- end }}

            ################
            ## DATA PLANE ##
            ################

            # see extension https://github.com/catenax-ng/product-edc/tree/develop/edc-extensions/dataplane-selector-configuration
            - name: EDC_DATAPLANE_SELECTOR_SOKRATESPLANE_URL
              value: {{ include "txdc.dataplane.url.control" . }}
            - name: EDC_DATAPLANE_SELECTOR_SOKRATESPLANE_SOURCETYPES
              value: HttpData
            - name: EDC_DATAPLANE_SELECTOR_SOKRATESPLANE_DESTINATIONTYPES
              value: HttpProxy
            - name: EDC_DATAPLANE_SELECTOR_SOKRATESPLANE_PROPERTIES
              value: |-
                {{ printf "{ \"publicApiUrl\": \"%s\" }" (include "txdc.dataplane.url.public" . ) }}

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/control-plane/data-plane-transfer
            - name: EDC_TRANSFER_PROXY_ENDPOINT
              value: {{ include "txdc.dataplane.url.public" . }}
            - name: EDC_TRANSFER_PROXY_TOKEN_SIGNER_PRIVATEKEY_ALIAS
              value: {{ .Values.vault.secretNames.transferProxyTokenSignerPrivateKey | quote }}
            - name: EDC_TRANSFER_PROXY_TOKEN_VERIFIER_PUBLICKEY_ALIAS
              value: {{ .Values.vault.secretNames.transferProxyTokenSignerPublicKey | quote }}

            # see extension https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/tree/main/extensions/control-plane/http-receiver

            - name: EDC_RECEIVER_HTTP_ENDPOINT
              value: {{ .Values.backendService.httpProxyTokenReceiverUrl | required ".Values.backendService.httpProxyTokenReceiverUrl is required" | quote }}

            ###########
            ## VAULT ##
            ###########

            {{- if .Values.vault.hashicorp.enabled }}
            # see extension https://github.com/catenax-ng/product-edc/tree/develop/edc-extensions/hashicorp-vault
            - name: EDC_VAULT_HASHICORP_URL
              value: {{ .Values.vault.hashicorp.url | required ".Values.vault.hashicorp.url is required" | quote }}
            - name: EDC_VAULT_HASHICORP_TOKEN
              value: {{ .Values.vault.hashicorp.token | required ".Values.vault.hashicorp.token is required" | quote }}
            - name: EDC_VAULT_HASHICORP_TIMEOUT_SECONDS
              value: {{ .Values.vault.hashicorp.timeout | quote }}
            - name: EDC_VAULT_HASHICORP_HEALTH_CHECK_ENABLED
              value: {{ .Values.vault.hashicorp.healthCheck.enabled | quote }}
            - name: EDC_VAULT_HASHICORP_HEALTH_STANDBY_OK
              value: {{ .Values.vault.hashicorp.healthCheck.standbyOk | quote }}
            - name: EDC_VAULT_HASHICORP_API_SECRET_PATH
              value: {{ .Values.vault.hashicorp.paths.secret | quote }}
            - name: EDC_VAULT_HASHICORP_API_HEALTH_CHECK_PATH
              value: {{ .Values.vault.hashicorp.paths.health | quote }}
            {{- end }}

            {{- if .Values.vault.azure.enabled }}

            - name: EDC_VAULT_CLIENTID
              value: {{ .Values.vault.azure.client | quote  }}
            - name: EDC_VAULT_TENANTID
              value: {{ .Values.vault.azure.tenant | quote }}
            - name: EDC_VAULT_NAME
              value: {{ .Values.vault.azure.name | quote }}
            - name: EDC_VAULT_CLIENTSECRET
              value: {{ .Values.vault.azure.secret | quote }}
            - name: EDC_VAULT_CERTIFICATE
              value: {{ .Values.vault.azure.certificate | quote }}

            {{- end }}

            #####################
            ## DATA ENCRYPTION ##
            #####################

            # see extension https://github.com/catenax-ng/product-edc/tree/develop/edc-extensions/data-encryption
            - name: EDC_DATA_ENCRYPTION_KEYS_ALIAS
              value: {{ .Values.vault.secretNames.transferProxyTokenEncryptionAesKey | quote }}
            - name: EDC_DATA_ENCRYPTION_ALGORITHM
              value: AES

      volumes:
        - name: configuration
          configMap:
            name: {{ include "txdc.fullname" . }}-controlplane
            items:
              - key: opentelemetry.properties
                path: opentelemetry.properties
              - key: logging.properties
                path: logging.properties
      {{- with .Values.controlplane.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controlplane.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controlplane.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}