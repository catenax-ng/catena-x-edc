# Default values for eclipse-dataspace-connector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: [ ]

customLabels: { }

controlplane:
  nameOverride: ""
  fullnameOverride: ""
  image:
    # when left empty the deployment will select the correct image automatically
    repository: ""
    pullPolicy: IfNotPresent
    # if null chart.AppVersion. Please note that the deployment might not be compatible with lower version
    tag: ""
  initContainers: [ ]
  debug:
    enabled: false
    port: 1044
    suspendOnStart: false
  logLevel: INFO
  internationalDataSpaces:
    id: TXDC
    description: Tractus-X Eclipse IDS Data Space Connector
    title: ""
    maintainer: ""
    curator: ""
    catalogId: TXDC-Catalog
  livenessProbe:
    # -- Whether to enable kubernetes [liveness-probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    # -- Whether to enable kubernetes [readiness-probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  endpoints:
    default:
      port: 8080
      path: /api
    data:
      port: 8081
      path: /data
    validation:
      port: 8082
      path: /validation
    control:
      port: 8083
      path: /control
    ids:
      port: 8084
      path: /api/v1/ids
    metrics:
      port: 8085
      path: /metrics
  service:
    type: ClusterIP
    annotations: { }
  podLabels: { }
  podAnnotations: { }
  podSecurityContext:
    { }
  # fsGroup: 2000
  securityContext:
    { }
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000
  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: false
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "edc-control.local"
      # -- Additional ingress annotations to add
      annotations: { }
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - ids
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: ""
      # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
      tls:
        # -- Enables TLS on the ingress resource
        enabled: false
        # -- If present overwrites the default secret name
        secretName: ""
      ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
      certManager:
        # -- If preset enables certificate generation via cert-manager namespace scoped issuer
        issuer: ""
        # -- If preset enables certificate generation via cert-manager cluster-wide issuer
        clusterIssuer: ""
    ## Private / Intranet facing Ingress
    - enabled: false
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "edc-control.intranet"
      # -- Additional ingress annotations to add
      annotations: { }
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - data
        - control
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: ""
      # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
      tls:
        # -- Enables TLS on the ingress resource
        enabled: false
        # -- If present overwrites the default secret name
        secretName: ""
      ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
      certManager:
        # -- If preset enables certificate generation via cert-manager namespace scoped issuer
        issuer: ""
        # -- If preset enables certificate generation via cert-manager cluster-wide issuer
        clusterIssuer: ""
  volumeMounts: [ ]
  volumes: [ ]
  resources:
    { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }

dataplane:
  nameOverride: ""
  fullnameOverride: ""
  image:
    # when left empty the deployment will select the correct image automatically
    repository: ""
    pullPolicy: IfNotPresent
    # if null chart.AppVersion. Please note that the deployment might not be compatible with lower version
    tag: ""
  initContainers: [ ]
  debug:
    enabled: false
    port: ""
    suspendOnStart: false
  service:
    type: ClusterIP
    port: 80
  endpoints:
    default:
      port: 8080
      path: /api
    public:
      port: 8185
      path: /api/public
    control:
      port: 9999
      path: /api/dataplane/control
    metrics:
      port: 9090
      path: /metrics
  podLabels: { }
  podAnnotations: { }
  podSecurityContext:
    { }
  # fsGroup: 2000
  securityContext:
    { }
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000
  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: false
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "edc-data.local"
      # -- Additional ingress annotations to add
      annotations: { }
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - public
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: ""
      # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
      tls:
        # -- Enables TLS on the ingress resource
        enabled: false
        # -- If present overwrites the default secret name
        secretName: ""
      ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
      certManager:
        # -- If preset enables certificate generation via cert-manager namespace scoped issuer
        issuer: ""
        # -- If preset enables certificate generation via cert-manager cluster-wide issuer
        clusterIssuer: ""
  volumeMounts: [ ]
  volumes: [ ]
  resources:
    { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }

postgresql:
  enabled: false
  install: false
  host: ""
  containerPorts:
    postgresql: 5432
  auth:
    username: "user"
    password: "password"
    database: "edc"

vault:
  hashicorp:
    enabled: true
    host: ""
    token: ""
    timeout: 30
    healthCheck:
      enabled: true
      standbyOk: true
    paths:
      secret: /v1/secret
      health: /v1/sys/health
  azure:
    enabled: false
    name: ""
    client: ""
    tenant: ""
    secret: ""
    certificate: ""
  secretNames:
    transferProxyTokenSignerPublicKey: transfer-proxy-token-signer-public-key
    transferProxyTokenSignerPrivateKey: transfer-proxy-token-signer-private-key
    transferProxyTokenEncryptionAesKey: transfer-proxy-token-encryption-aes-key
    dapsPrivateKey: daps-private-key
    dapsPublicKey: daps-public-key

daps:
  host: ""
  clientId: ""
  paths:
    jwks: /jwks.json
    token: /token

backendService:
  httpProxyTokenReceiverUrl: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
